bool dfs(int n, vector<int> adj[],int vis[],int cur, int parent){
    vis[cur]=1;
    
    for(auto child:adj[cur]){
        // cout<<child<<" "<<cur<<endl;
        if( !vis[child] ){
            if ( dfs(n,adj,vis,child,cur) )
                return  true;
        }
        else if( child!=parent )
            return true;//visited and not parent 
    } 
    return false;
}

// Function to detect cycle in an undirected graph.
bool isCycle(int n, vector<int> adj[]) {
    int vis[n] = {0};
    for(int i=0;i<n;i++){
        if(!vis[i]){
            // if( bfs(n,adj,vis,i) )
            if( dfs(n,adj,vis,i,-1) )
                return true;
        }
    }
    return false;
}