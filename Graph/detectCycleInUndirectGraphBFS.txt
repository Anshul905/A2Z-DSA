//when child node is visited and obvs it is not parent
bool bfs(int n, vector<int> adj[],int vis[],int x){
    queue< pair<int,int> > q ;
    q.push({x,-1});
    vis[x]=1;

    while(!q.empty()){
        int cur = q.front().first ;
        int parent = q.front().second ;
        q.pop();
        for(auto child:adj[cur]){
            if( !vis[child] )
            {
                vis[child]=1;
                q.push({child,cur});
            }else if( child!=parent ){
                return true;//visited and not parent 
            }
        }
    } 
    return false;
}

// Function to detect cycle in an undirected graph.
bool isCycle(int n, vector<int> adj[]) {
    int vis[n] = {0};
    for(int i=0;i<n;i++){
        if(!vis[i]){
            if( bfs(n,adj,vis,i) )
                return true;
        }
    }
    return false;
}